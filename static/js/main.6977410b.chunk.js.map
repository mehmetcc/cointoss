{"version":3,"sources":["components/MainGrid.js","serviceWorker.js","index.js","App.js","static/para.jpg"],"names":["useStyles","makeStyles","theme","root","flexGrow","MainGrid","classes","shareUrl","useState","text","setText","listVals","setListVal","shareMessage","setShareMessage","React","open","setOpen","handleClose","className","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","id","src","para","width","height","alt","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","map","index","DialogContentText","Typography","variant","align","DialogActions","Button","onClick","color","autoFocus","sideStr","Math","round","random","dateString","Date","toString","reportsOfTheFuturePassed","console","log","tossCoin","FacebookShareButton","url","quote","FacebookIcon","size","TwitterShareButton","title","TwitterIcon","WhatsappShareButton","WhatsappIcon","TelegramShareButton","TelegramIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6977410b.chunk.js","sourcesContent":["/** React imports */\nimport React, {useState} from 'react';\n/** Material UI imports */\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n/** other imports */\nimport {\n  FacebookShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  WhatsappShareButton,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  WhatsappIcon,\n} from 'react-share';\nimport para from './../static/para.jpg';\n\nconst useStyles = makeStyles (theme => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function MainGrid () {\n  const classes = useStyles ();\n\n  /** Change this for production */\n  const shareUrl = 'http://mehmetcc.github.io/cointoss';\n\n  /** some state variables */\n  const [text, setText] = useState ('');\n  const [listVals, setListVal] = useState ([]);\n  const [shareMessage, setShareMessage] = useState (\n    'Yazı tura oynamak ister misin? '\n  );\n  const [open, setOpen] = React.useState (false);\n\n  /** nested functions */\n  const handleClickOpen = () => {\n    setOpen (true);\n  };\n\n  const handleClose = () => {\n    setOpen (false);\n  };\n\n  const tossCoin = () => {\n    // 0 for heads, 1 for tails\n    let side = Math.round (Math.random ());\n    let sideStr = side ? 'Tura' : 'Yazı';\n    const dateString = new Date ().toString ();\n    // such a gr8 film that was\n    const reportsOfTheFuturePassed =\n      dateString + ' sularında ' + sideStr + ' atmıştın!';\n    setListVal ([...listVals, reportsOfTheFuturePassed]);\n\n    setText (sideStr + ' geldi! Arkadaşlarınla paylaşmak için butona tıkla');\n    setShareMessage (\n      dateString +\n        ' sularında ' +\n        sideStr +\n        ' attım! Yazı tura oynamak için bu linke tıkla! '\n    );\n\n    console.log ('Debug - Title: ' + shareMessage);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        spacing={10}\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{minHeight: '80vh'}}\n      >\n        <Grid item xs={12}>\n          {/** ToDo animation */}\n          <div id=\"coin\">\n          <img src={para} width={400} height={400} alt=\"Madeni para\" />\n          </div>\n        </Grid>\n\n        <Grid item xs={12}>\n\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">\n              {'Zaman Makinesi'}\n            </DialogTitle>\n            <DialogContent>\n              {listVals.map ((item, index) => (\n                <DialogContentText id={\"contentText\" + index}>\n                  <Typography variant=\"body1\" align=\"center\" id={\"contentBody\" + index}>{item}</Typography>\n                </DialogContentText>\n              ))}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\n                Kapat yaa\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" align=\"center\">{text}</Typography>\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => tossCoin ()}\n            >\n              {'Yazı mı Tura mı?'}\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleClickOpen}\n            >\n              {'Zaman Makinesi'}\n            </Button>\n          </Grid>\n          <Grid item>\n            <FacebookShareButton\n              url={shareUrl}\n              quote={shareMessage}\n              className=\"Demo__some-network__share-button\"\n            >\n              <FacebookIcon size={32} round />\n            </FacebookShareButton>\n\n          </Grid>\n\n          <Grid item>\n            <TwitterShareButton\n              url={shareUrl}\n              title={shareMessage}\n              className=\"Demo__some-network__share-button\"\n            >\n              <TwitterIcon size={32} round />\n            </TwitterShareButton>\n\n          </Grid>\n\n          <Grid item>\n            <WhatsappShareButton\n              url={shareUrl}\n              title={shareMessage}\n              className=\"Demo__some-network__share-button\"\n            >\n              <WhatsappIcon size={32} round />\n            </WhatsappShareButton>\n\n          </Grid>\n\n          <Grid item>\n            <TelegramShareButton\n              url={shareUrl}\n              title={shareMessage}\n              className=\"Demo__some-network__share-button\"\n            >\n              <TelegramIcon size={32} round />\n            </TelegramShareButton>\n\n          </Grid>\n\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport MainGrid from './components/MainGrid';\n\nexport default function App () {\n  return (\n    <div>\n      <MainGrid />\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/para.29a26591.jpg\";"],"sourceRoot":""}